
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Election, Candidate, Vote, VoterRecord, VoterCode, VoterRegistration } from '@/types';

const SUPABASE_URL = "https://jbtxfljekltqdlhmzaqr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpidHhmbGpla2x0cWRsaG16YXFyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzNTAyNDYsImV4cCI6MjA2MTkyNjI0Nn0.RG9yR1tGPXeEVbHKF6EDpZSZBxMsI_zJ46-Sqqaotow";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper functions to convert database types to application types
export const mapDatabaseElectionToAppElection = (dbElection: any, candidates: any[] = []): Election => {
  return {
    id: dbElection.id,
    title: dbElection.title,
    description: dbElection.description,
    electionCode: dbElection.election_code,
    startDate: new Date(dbElection.start_date),
    endDate: new Date(dbElection.end_date),
    status: dbElection.status,
    registrationStatus: dbElection.registration_status,
    createdBy: dbElection.created_by,
    createdAt: new Date(dbElection.created_at),
    candidates: candidates.map(c => ({
      id: c.id,
      name: c.name,
      description: c.description,
      photoUrl: c.photo_url
    }))
  };
};

// Helper function to fetch elections from database
export const fetchElections = async (): Promise<Election[]> => {
  try {
    // Fetch all elections
    const { data: electionsData, error: electionsError } = await supabase
      .from('elections')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (electionsError) {
      console.error('Error fetching elections:', electionsError);
      return [];
    }

    // For each election, fetch its candidates
    const elections: Election[] = await Promise.all(
      electionsData.map(async (election) => {
        const { data: candidatesData, error: candidatesError } = await supabase
          .from('candidates')
          .select('*')
          .eq('election_id', election.id);
        
        if (candidatesError) {
          console.error(`Error fetching candidates for election ${election.id}:`, candidatesError);
          return mapDatabaseElectionToAppElection(election, []);
        }
        
        return mapDatabaseElectionToAppElection(election, candidatesData);
      })
    );

    return elections;
  } catch (error) {
    console.error('Failed to fetch elections:', error);
    return [];
  }
};

// Count all active voters
export const countActiveVoters = async (): Promise<number> => {
  try {
    const { count, error } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true })
      .eq('role', 'voter');
    
    if (error) {
      console.error('Error counting voters:', error);
      return 0;
    }
    
    return count || 0;
  } catch (error) {
    console.error('Failed to count voters:', error);
    return 0;
  }
};

// Count all votes for an election
export const countVotes = async (electionId?: string): Promise<number> => {
  try {
    const query = supabase
      .from('votes')
      .select('*', { count: 'exact', head: true });
    
    if (electionId) {
      query.eq('election_id', electionId);
    }
    
    const { count, error } = await query;
    
    if (error) {
      console.error('Error counting votes:', error);
      return 0;
    }
    
    return count || 0;
  } catch (error) {
    console.error('Failed to count votes:', error);
    return 0;
  }
};

// Get election results
export const getElectionVoteCounts = async (electionId: string): Promise<Record<string, number>> => {
  try {
    const { data: votes, error } = await supabase
      .from('votes')
      .select('candidate_id')
      .eq('election_id', electionId);
    
    if (error) {
      console.error('Error fetching votes:', error);
      return {};
    }
    
    const results: Record<string, number> = {};
    
    votes.forEach(vote => {
      if (results[vote.candidate_id]) {
        results[vote.candidate_id]++;
      } else {
        results[vote.candidate_id] = 1;
      }
    });
    
    return results;
  } catch (error) {
    console.error('Failed to get election results:', error);
    return {};
  }
};
